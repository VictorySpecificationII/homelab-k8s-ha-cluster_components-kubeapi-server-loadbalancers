- hosts: frontendloadbalancers
  tasks:

    - shell: ip -f inet addr show eth0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p' | sed '2d'
      register: privateIP

- hosts: localhost
  gather_facts: False
  become: False
  tasks:

    - name: "Create ./artifacts directory to house keys and certificates"
      file:
        path: ./artifacts
        state: directory

    - name: "Generate private key for each member"
      openssl_privatekey:
        path: ./artifacts/{{item}}.key
        type: RSA
        size: 4096
        state: present
        force: True
      with_items: "{{ groups['frontendloadbalancers'] }}"

    - name: "Generate CSR for each member"
      openssl_csr:
        path: ./artifacts/{{item}}.csr
        privatekey_path: ./artifacts/{{item}}.key
        common_name: "{{item}}"
        key_usage:
          - digitalSignature
        extended_key_usage:
          - serverAuth
        subject_alt_name:
          - IP:{{ hostvars[item]['privateIP']['stdout']}}
          - IP:127.0.0.1
        force: True
      with_items: "{{ groups['frontendloadbalancers'] }}"

    - name: "Generate private key for CA"
      openssl_privatekey:
        path: ./artifacts/ca.key
        type: RSA
        size: 4096
        state: present
        force: True

    - name: "Generate CSR for CA"
      openssl_csr:
        path: ./artifacts/ca.csr
        privatekey_path: ./artifacts/ca.key
        common_name: ca
        organization_name: "HAProxy CA"
        basic_constraints:
          - CA:TRUE
          - pathlen:1
        basic_constraints_critical: True
        key_usage:
          - keyCertSign
          - digitalSignature
        force: True

    - name: "Generate self-signed CA certificate"
      openssl_certificate:
        path: ./artifacts/ca.crt
        privatekey_path: ./artifacts/ca.key
        csr_path: ./artifacts/ca.csr
        provider: selfsigned
        force: True

    - name: "Generate an `HAProxy` member certificate signed with our own CA certificate"
      openssl_certificate:
        path: ./artifacts/{{item}}.crt
        csr_path: ./artifacts/{{item}}.csr
        ownca_path: ./artifacts/ca.crt
        ownca_privatekey_path: ./artifacts/ca.key
        provider: ownca
        force: True
      with_items: "{{ groups['frontendloadbalancers'] }}"




- hosts: frontendloadbalancers
  become: true
  gather_facts: yes
  tasks:

    - name: Test hosts list
      debug:
        msg: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"

    - debug: var=ansible_all_ipv4_addresses
    - debug: var=ansible_default_ipv4.address

    - name: Update repositories cache and install HAProxy package
      apt:
        name: haproxy
        update_cache: yes

    - name: Stop service HAProxy
      systemd:
        name: haproxy
        state: stopped

    - name: "Create directory for HAProxy certificates"
      file:
        path: /etc/haproxy/ssl
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: "Copy over the CA certificate"
      copy:
        src: ./artifacts/ca.crt
        remote_src: False
        dest: /etc/haproxy/ssl/ca.crt
        owner: root
        group: root
        mode: 0644

    - name: "Copy over the `HAProxy` member certificate"
      copy:
        src: ./artifacts/{{inventory_hostname}}.crt
        remote_src: False
        dest: /etc/haproxy/ssl/server.crt
        owner: root
        group: root
        mode: 0644

    - name: "Copy over the `HAProxy` member key"
      copy:
        src: ./artifacts/{{inventory_hostname}}.key
        remote_src: False
        dest: /etc/haproxy/ssl/server.key
        owner: root
        group: root
        mode: 0600


- hosts: frontendloadbalancers, kubeapiservers
  become: true
  gather_facts: yes
  tasks:

    - name: Test hosts list for HAProxy configuration step
      debug:
        msg: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"


    - name: "Create configuration file for HAProxy"
      template:
        src: templates/haproxy.conf.yaml.j2
        dest: /etc/haproxy/haproxy.cfg
        owner: root
        group: root
        mode: 0600
      when: inventory_hostname in groups["frontendloadbalancers"]

- hosts: frontendloadbalancers
  become: true
  gather_facts: yes
  tasks:

    - name: "Enable service HAProxy on boot and ensure it is not masked"
      systemd:
        name: haproxy
        enabled: yes
        masked: no

    - name: "Restart service HAProxy and issue daemon-reload to pick up config changes"
      systemd:
        name: haproxy
        state: restarted
        daemon_reload: yes

    - name: Update repositories cache and install Keepalived package
      apt:
        name: keepalived
        update_cache: no

    - name: Update repositories cache and install psmisc package
      apt:
        name: psmisc
        update_cache: no

- hosts: frontendloadbalancers[0]
  become: true
  gather_facts: yes
  vars_files: variables.yaml
  tasks:

    - name: "Stop service keepalived on the first load balancer"
      systemd:
        name: keepalived
        state: stopped

    - name: "Create configuration file for Keepalived"
      template:
        src: templates/keepalived_master.conf.yaml.j2
        dest: /etc/keepalived/keepalived.conf
        owner: root
        group: root
        mode: 0600

    - name: "Enable service keepalived on boot and ensure it is not masked"
      systemd:
        name: keepalived
        enabled: yes
        masked: no

    - name: "Restart service keepalived and issue daemon-reload to pick up config changes"
      systemd:
        name: keepalived
        state: restarted
        daemon_reload: yes


- hosts: frontendloadbalancers[1]
  become: true
  gather_facts: yes
  vars_files: variables.yaml
  tasks:

    - name: "Stop service keepalived on the second load balancer"
      systemd:
        name: keepalived
        state: stopped

    - name: "Create configuration file for Keepalived"
      template:
        src: templates/keepalived_backup.conf.yaml.j2
        dest: /etc/keepalived/keepalived.conf
        owner: root
        group: root
        mode: 0600

    - name: "Enable service keepalived on boot and ensure it is not masked"
      systemd:
        name: keepalived
        enabled: yes
        masked: no

    - name: "Restart service keepalived and issue daemon-reload to pick up config changes"
      systemd:
        name: keepalived
        state: restarted
        daemon_reload: yes
